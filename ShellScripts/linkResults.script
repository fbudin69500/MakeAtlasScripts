#!/bin/tcsh
set nbparams = $#argv
if( `echo $0 | grep -c -i -e '^/'` > 0 ) then
  if( `echo $0 | grep -o "/" | wc -l` > 1 ) then
    set pathScript = $0:h
  else
    set pathScript = ''
  endif
else
  set pathVar = `pwd`
  if( $0:h != $0:t ) then
    set localPath = $0:h
  else
    set localPath = '.'
  endif
  set pathScript = $pathVar/$localPath
endif
if( $nbparams < 1 ) then
  echo "Usage: Step [ConfigFile] / [ProcessingDir ResultDir] [-l file1 file2 ... filen] [-b file1 file2 ... filen][-s subDirectory]"
  exit -1
endif
set step=$argv[1]
if( $step < 1 || $step > 5 ) then
  echo "Step number must be between 1 and 5"
  echo "1-Converted"
  echo "2-Registration"
  echo "3-Skullstrip"
  echo "4-Atlas Creation"
  echo "5-Warp"
  exit -1
endif
#Steps 1 and 2
if( $step == 1 || $step == 2 ) then
  if( $nbparams < 3 ) then
    echo "Usage: Step ProcessingDir ResultDir [-l file1 file2 ... filen] [-b file1 file2 ... filen][-s subDirectory]"
    exit -1
  endif
  set Processing_dir=$argv[2]
  set Result_dir=$argv[3]
  #creates output directory if necessary
  if( ! -d $Result_dir ) then
    if( -e $Result_dir ) then
      echo "Error: Result directory name already exists and is not a directory"
      exit -1
    else
      mkdir $Result_dir
    endif
  endif
  #reads args
  @ count = 4
  set isList = 0
  set isblackList = 0
  set List =''
  set blackList = ''
  set subdir = 0 ;
  set subdirName = ''
  while ($count <= $nbparams)
    set changed = 0
    if( "$argv[$count]" == "-l" ) then
      set isList = 1
      set isblackList = 0
      set changed = 1
    endif
    if( "$argv[$count]" == "-b" ) then
      set isList = 0
      set isblackList = 1
      set changed = 1
    endif
    if( "$argv[$count]" == "-s" ) then
      if( $subdirName != '' ) then
        echo "Only one subdirectory name can be given at a time"
        exit -1
      endif
      set subdir = 1
      set isList = 0
      set isblackList = 0
      set changed = 1
    endif
    if( $changed == 0 ) then
      if( $isList == 1 ) set List = ($List $argv[$count]:h )
      if( $isblackList == 1 ) set blackList = ($blackList $argv[$count]:h )
      if( $subdir == 1 ) then
        set subdirName = $argv[$count]:h
        set subdir = 0
      endif
    endif
    @ count = $count + 1
  end
  # if no case given, looks for cases in Processing_dir
  if( $List[1] == '' ) then
    set blackList=($blackList "temp" "Temp" "template" "Template" "config" "Config" "Results" "results" )
    #Reads files contains in processing_dir
    set listTemp=(`\ls $Processing_dir`)
    foreach i ($listTemp)
      if( -d "$Processing_dir/$i" ) then
        set List = ($List $i:h)
      endif
    end
  endif
  #checks against black list
  set ListCases = ''
  foreach i ($List)
    set good = 1
    foreach j ($blackList)
      if( $j == $i ) set good = 0
    end
    if( $good == 1 ) set ListCases = ($ListCases $i)
  end
  #Creates cases subdirectory in "Result_dir" if necessary
  foreach i ($ListCases)
    if( ! -d $Result_dir/$i ) then
      if( -e $Result_dir/$i ) then
        echo "Error: Result directory name already exists and is not a directory"
        exit -1
      else
        mkdir $Result_dir/$i
      endif
    endif
  end
  #Start processing
  if( $step == 1 ) then
    foreach i ($ListCases)
      if( $subdirName == '' ) then
        set subdirNameCase = "1-Converted"
      endif
      set tolink = `\ls $Processing_dir/$i/$subdirNameCase | grep '.nii\|.gipl\|.nhdr\|.nrrd\|.mha\|.mhd'|grep -v '~'`
      foreach j ($tolink)
        ln -sf $Processing_dir/$i/1-Converted/$j $Result_dir/$i/$j
      end
    end
  endif
  if( $step == 2 ) then
    foreach i ($ListCases)
      if( $subdirName == '' ) then
        if( `\ls $Processing_dir/$i | grep 2-Registration | wc -l` > 1 ) then
          echo "Multiple subdirectories contain 2-Registration. Please set the correct name manually"
          exit -1
        endif
        set subdirNameTemp=`\ls $Processing_dir/$i | grep 2-Registration`
        set subdirNameCase="$subdirNameTemp:h"
      else
        set subdirNameCase=$subdirName
      endif
      set tolink = `\ls $Processing_dir/$i/$subdirNameCase | grep '.txt\|.tfm\|.mat\|.nii\|.gipl\|.nhdr\|.nrrd\|.mha\|.mhd'|grep -v '~'`
      foreach j ($tolink)
        ln -sf $Processing_dir/$i/$subdirNameCase/$j $Result_dir/$i/$j
      end
    end
  endif
else
  if( $nbparams != 2 ) then
    echo "Usage: Step ConfigFile"
    exit -1
  endif
  set configFile=$argv[2]
  if( ! -e $configFile ) then
    echo "Error: config file does not exist"
    exit -1
  endif
  #Get values in config file
  set cases = `$pathScript/ReadConfig.script $configFile CASES`
  set directory = `$pathScript/ReadConfig.script $configFile dir`
  set resultspredir = `$pathScript/ReadConfig.script $configFile INPUT_PRE_DIR`
  set processpredir = `$pathScript/ReadConfig.script $configFile OUTPUT_PRE_DIR`
  set subDir = `$pathScript/ReadConfig.script $configFile PROCESS_SUBDIR`
  #creates output directory if necessary
  if( ! -d $directory/$resultspredir ) then
    if( -e $directory/$resultspredir ) then
      echo "Error: Result directory name already exists and is not a directory"
      exit -1
    else
      mkdir $directory/$resultspredir
    endif
  endif
  foreach i ($cases)
    if( ! -d $directory/$resultspredir/$i ) then
      if( -e $directory/$resultspredir/$i ) then
        echo "Error: Result directory name already exists and is not a directory"
        echo "Links not created for "$i
        break
      else
        mkdir $directory/$resultspredir/$i
      endif
    endif
  end
  if( $step == 3 ) then
    set masktag = `$pathScript/ReadConfig.script $configFile NEW_MASK_TAG`
    set ext = `$pathScript/ReadConfig.script $configFile extension`
    set bias = `$pathScript/ReadConfig.script $configFile biasFieldCorrection`
    set abcSuffix = (`$pathScript/ReadConfig.script $configFile ABC_IMAGE_SUFFIX`)
    set suffix = abcSuffix[1]
    foreach i ($cases)
      ln -sf $directory/$processpredir/$i/$subdir/$i$masktag$ext $directory/$resultspredir/$i/$i$masktag$ext
      if( $bias == "TRUE" ) then
        ln -sf $directory/$processpredir/$i/$subdir/$i${suffix}_corrected.$ext $directory/$resultspredir/$i/$i${suffix}_corrected.$ext
      endif
    end
  else if ( $step == 4 ) then
    set atlasDir = `$pathScript/ReadConfig.script $configFile outputDir`
    if( ! -d $directory/$resultspredir/Atlas ) then
      if( -e $directory/$resultspredir/Atlas ) then
        echo "Error: Result directory name already exists and is not a directory"
        echo "Links not created for Atlas"
        break
      else
        mkdir $directory/$resultspredir/Atlas
        set tolink = `\ls $atlasDir | grep '.nii\|.gipl\|.nhdr\|.nrrd\|.mha\|.mhd'|grep -v '~'`
          foreach j ($tolink)
            ln -sf $atlasDir/$j $directory/$resultspredir/Atlas/$j
          end
      endif
    endif
    foreach i ($cases)
      ln -sf $directory/$processpredir/$i/$subdir/${i}_hFieldToAtlas.mha $directory/$resultspredir/$i/${i}_hFieldToAtlas.mha
      ln -sf $directory/$processpredir/$i/$subdir/${i}_inv_hFieldToAtlas.mha $directory/$resultspredir/$i/${i}_inv_hFieldToAtlas.mha
    end
  else if ( $step == 5 ) then
    set statSuffix = `$pathScript/ReadConfig.script $configFile STAT_FILE_SUFFIX`
    set labelMaps = `$pathScript/ReadConfig.script $configFile LabelMapsToWarp`
    foreach i ($cases)
      foreach j ($labelMaps)
        set name = $j:t
        ln -sf $directory/$processpredir/$i/$subdir/$name $directory/$resultspredir/$name
        foreach k ($statSuffix)
          set name_noext = $j:t:r
          set stat_noext = $j:t:r
          ln -sf $directory/$processpredir/$i/$subdir/${name_noext}${stat_noext}_stat.txt
        end
      end
    end
  endif
endif
