#!/bin/tcsh
set nbparams = $#argv
if( `echo $0 | grep -c -i -e '^/'` > 0 ) then
  if( `echo $0 | grep -o "/" | wc -l` > 1 ) then
    set pathScript = $0:h
  else
    set pathScript = ''
  endif
else 
  set pathVar = `pwd`
  if( $0:h != $0:t ) then
    set localPath = $0:h
  else
    set localPath = '.'
  endif
  set pathScript = $pathVar/$localPath
endif 
if( $nbparams < 1 ) then
  echo "Usage: Step [ConfigFile] [ResultsDir] / [ProcessingDir ResultDir] [-l file1 file2 ... filen] [-b file1 file2 ... filen][-s subDirectory]"
  exit -1
endif
set step=$argv[1]

if( $step < 1 || $step > 7 ) then
  echo "Step number must be between 1 and 7"
  echo "1-Converted"
  echo "2-Registration"
  echo "3-Skullstrip"
  echo "4-Average Creation"
  echo "5-Average Segmentation"
  echo "6-Warp"
  echo "7-Stats"
  exit -1
endif
#Steps 1 and 2
if( $step == 1 ) then
  if( $nbparams < 3 ) then
    echo "Usage: Step ProcessingDir ResultDir [-l file1 file2 ... filen] [-b file1 file2 ... filen][-s subDirectory]"
    exit -1
  endif
  set Processing_dir=$argv[2]
  set Result_dir=$argv[3]
  #creates output directory if necessary
  if( ! -d $Result_dir ) then
    if( -e $Result_dir ) then
      echo "Error: Result directory name already exists and is not a directory"
      exit -1
    else
      mkdir $Result_dir
    endif
  endif
  #reads args
  @ count = 4
  set isList = 0
  set isblackList = 0
  set List =''
  set blackList = ''
  set subdir = 0 ;
  set subdirName = ''
  while ($count <= $nbparams)
    set changed = 0
    if( "$argv[$count]" == "-l" ) then
      set isList = 1
      set isblackList = 0
      set changed = 1
    endif
    if( "$argv[$count]" == "-b" ) then
      set isList = 0
      set isblackList = 1
      set changed = 1
    endif
    if( "$argv[$count]" == "-s" ) then
      if( $subdirName != '' ) then
        echo "Only one subdirectory name can be given at a time"
        exit -1
      endif
      set subdir = 1
      set isList = 0
      set isblackList = 0
      set changed = 1
    endif
    if( $changed == 0 ) then
      if( $isList == 1 ) set List = ($List $argv[$count]:h )
      if( $isblackList == 1 ) set blackList = ($blackList $argv[$count]:h )
      if( $subdir == 1 ) then
        set subdirName = $argv[$count]:h
        set subdir = 0
      endif
    endif
    @ count = $count + 1
  end
  # if no case given, looks for cases in Processing_dir
  if( $List[1] == '' ) then
    set blackList=($blackList "temp" "Temp" "template" "Template" "config" "Config" "Results" "results" )
    #Reads files contains in processing_dir
    set listTemp=(`\ls $Processing_dir`)
    foreach i ($listTemp)
      if( -d "$Processing_dir/$i" ) then
        set List = ($List $i:h)
      endif
    end
  endif
  #checks against black list
  set ListCases = ''
  foreach i ($List)
    set good = 1
    foreach j ($blackList)
      if( $j == $i ) set good = 0
    end
    if( $good == 1 ) set ListCases = ($ListCases $i)
  end
  #Creates cases subdirectory in "Result_dir" if necessary
  foreach i ($ListCases)
    if( ! -d $Result_dir/$i ) then
      if( -e $Result_dir/$i ) then
        echo "Error: Result directory name already exists and is not a directory"
        exit -1
      else
        mkdir $Result_dir/$i
      endif
    endif
  end
  #Start processing
  if( $step == 1 ) then
    foreach i ($ListCases)
      if( $subdirName == '' ) then
        set subdirNameCase = "1-Converted"
      else
        set subdirNameCase=$subdirName
      endif
      set tolink = `\ls $Processing_dir/$i/$subdirNameCase | grep '.nii\|.gipl\|.nhdr\|.nrrd\|.mha\|.raw\|.raw.gz\|.mhd'|grep -v '~'`
      foreach j ($tolink)
        ln -sf $Processing_dir/$i/$subdirNameCase/$j $Result_dir/$i/$j
      end
    end
  endif
else
  if( $nbparams != 3 ) then
    echo "Usage: Step ConfigFile ResultDir"
    exit -1
  endif
  set configFile=$argv[2]
  if( ! -e $configFile ) then
    echo "Error: config file does not exist"
    exit -1
  endif
  set Result_dir=$argv[3]
  #Get values in config file
  set cases = `$pathScript/ReadConfig.script $configFile CASES`
#  set directory = `$pathScript/ReadConfig.script $configFile dir`
#  set resultspredir = `$pathScript/ReadConfig.script $configFile INPUT_PRE_SUBDIR`
#  set processpredir = `$pathScript/ReadConfig.script $configFile OUTPUT_DIR`
  set outputdir = `$pathScript/ReadConfig.script $configFile OUTPUT_DIR`
#  set subDir = `$pathScript/ReadConfig.script $configFile PROCESS_SUBDIR`
  #creates output directory if necessary
  if( ! -d $Result_dir ) then
    if( -e $Result_dir ) then
      echo "Error: Result directory name already exists and is not a directory"
      exit -1
    else
      mkdir $Result_dir
    endif
  endif
  if( ! -d $Result_dir/Cases ) then
    if( -e $Result_dir/Cases ) then
      echo "Error: Result directory name already exists and is not a directory"
      exit -1
    else
      mkdir $Result_dir/Cases
    endif
  endif
  foreach i ($cases)
    if( ! -d $Result_dir/Cases/$i ) then
      if( -e $Result_dir/Cases/$i ) then
        echo "Error: Result directory name already exists and is not a directory"
        echo "Links not created for "$i
        break
      else
        mkdir $Result_dir/Cases/$i
      endif
    endif
  end
  
  if( $step == 2 ) then
    set outputdir = "`$pathScript/ReadConfig.script $configFile OUTPUT_DIR`"
    set imageType = "`$pathScript/ReadConfig.script $configFile Type`"
    set rawRootName = "`$pathScript/ReadConfig.script $configFile RawRootName`"
    set inputfile = "`$pathScript/ReadConfig.script $configFile INPUT_FILE`"
    set additionalImagesNN = "`$pathScript/ReadConfig.script $configFile ADDITIONAL_IMAGES_NN`"
    set additionalImages = "`$pathScript/ReadConfig.script $configFile ADDITIONAL_IMAGES`"
    set bias = `$pathScript/ReadConfig.script $configFile BIAS`
    if( ! -d $Result_dir/2-Registration ) then
      if( -e $Result_dir/2-Registration ) then
        echo "Error: Result directory name already exists and is not a directory"
        exit -1
      else
        mkdir $Result_dir/2-Registration
      endif
    endif
    if( $imageType == "scalar") then
      if( ! -d $Result_dir/2-Registration/ImageReg ) then
        if( -e $Result_dir/2-Registration/ImageReg ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/ImageReg
        endif
      endif
      foreach i (${cases})
        set rootname = `echo "$rawRootName"| sed "s/\*/$i/g"`
        set caseFolder=`echo "$outputdir"| sed "s/\*/$i/g"`
        set inputCase=`echo "$inputfile"| sed "s/\*/$i/g"`
        ln -sf $caseFolder/${rootname}_reg.nrrd $Result_dir/2-Registration/ImageReg/${rootname}_reg.nrrd
        ln -sf $caseFolder/${rootname}_reg.nrrd $Result_dir/Cases/$i/${rootname}_reg.nrrd
      end
    endif
    if( $imageType == "DTI" || $imageType == "DWI" ) then
      if( ! -d $Result_dir/2-Registration/MD ) then
        if( -e $Result_dir/2-Registration/MD ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/MD
        endif
      endif
      if( ! -d $Result_dir/2-Registration/FA ) then
        if( -e $Result_dir/2-Registration/FA ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/FA
        endif
      endif
      if( ! -d $Result_dir/2-Registration/AD ) then
        if( -e $Result_dir/2-Registration/AD ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/AD
        endif
      endif
      if( ! -d $Result_dir/2-Registration/RD ) then
        if( -e $Result_dir/2-Registration/RD ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/RD
        endif
      endif
      if( ! -d $Result_dir/2-Registration/ColorFA ) then
        if( -e $Result_dir/2-Registration/ColorFA ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/ColorFA
        endif
      endif
      if( ! -d $Result_dir/2-Registration/RegTensor ) then
        if( -e $Result_dir/2-Registration/RegTensor ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/RegTensor
        endif
      endif
      foreach i (${cases})
        set rootname = `echo "$rawRootName"| sed "s/\*/$i/g"`
        set caseFolder=`echo "$outputdir"| sed "s/\*/$i/g"`
        set inputCase=`echo "$inputfile"| sed "s/\*/$i/g"`
        ln -sf $caseFolder/${rootname}_dti_f_reg_MD.nrrd $Result_dir/2-Registration/MD/${rootname}_dti_f_reg_MD.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_MD.nrrd $Result_dir/Cases/$i/${rootname}_dti_f_reg_MD.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_FA.nrrd $Result_dir/2-Registration/FA/${rootname}_dti_f_reg_FA.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_FA.nrrd $Result_dir/Cases/$i/${rootname}_dti_f_reg_FA.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_RD.nrrd $Result_dir/2-Registration/RD/${rootname}_dti_f_reg_RD.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_RD.nrrd $Result_dir/Cases/$i/${rootname}_dti_f_reg_RD.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_AD.nrrd $Result_dir/2-Registration/AD/${rootname}_dti_f_reg_AD.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_AD.nrrd $Result_dir/Cases/$i/${rootname}_dti_f_reg_AD.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_ColorFA.nrrd $Result_dir/2-Registration/ColorFA/${rootname}_dti_f_reg_ColorFA.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg_ColorFA.nrrd $Result_dir/Cases/$i/${rootname}_dti_f_reg_ColorFA.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg.nrrd $Result_dir/2-Registration/RegTensor/${rootname}_dti_f_reg.nrrd
        ln -sf $caseFolder/${rootname}_dti_f_reg.nrrd $Result_dir/Cases/$i/${rootname}_dti_f_reg.nrrd
      end
    endif
    if( $imageType == "DWI" ) then
      if( ! -d $Result_dir/2-Registration/B0 ) then
        if( -e $Result_dir/2-Registration/B0 ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/B0
        endif
      endif
      if( ! -d $Result_dir/2-Registration/iDWI ) then
        if( -e $Result_dir/2-Registration/iDWI ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/iDWI
        endif
      endif
      if( ! -d $Result_dir/2-Registration/OrigTensor ) then
        if( -e $Result_dir/2-Registration/OrigTensor ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/2-Registration/OrigTensor
        endif
      endif
      foreach i (${cases})
        set rootname = `echo "$rawRootName"| sed "s/\*/$i/g"`
        set caseFolder=`echo "$outputdir"| sed "s/\*/$i/g"`
        set inputCase=`echo "$inputfile"| sed "s/\*/$i/g"`
        if( ${bias} == "TRUE" ) then
          set bias_suffix = "_biasCorrected"
        else
          set bias_suffix = ""
        endif
        ln -sf $caseFolder/${rootname}_b0${bias_suffix}_reg.nrrd $Result_dir/2-Registration/B0/${rootname}_b0${bias_suffix}_reg.nrrd
        ln -sf $caseFolder/${rootname}_b0${bias_suffix}_reg.nrrd $Result_dir/Cases/$i/${rootname}_b0${bias_suffix}_reg.nrrd
        ln -sf $caseFolder/${rootname}_idwi${bias_suffix}_reg.nrrd $Result_dir/2-Registration/iDWI/${rootname}_idwi${bias_suffix}_reg.nrrd
        ln -sf $caseFolder/${rootname}_idwi${bias_suffix}_reg.nrrd $Result_dir/Cases/$i/${rootname}_idwi${bias_suffix}_reg.nrrd
        ln -sf $caseFolder/${rootname}_dti_f.nrrd $Result_dir/2-Registration/OrigTensor/${rootname}_dti_f.nrrd
        ln -sf $caseFolder/${rootname}_dti_f.nrrd $Result_dir/Cases/$i/${rootname}_dti_f.nrrd
      end
    endif
    if( $additionalImagesNN != "''" ) then
      echo "Linking Additional NN images not implemented yet"
    endif
    if( $additionalImages != "''" ) then
      echo "Linking Additional images not implemented yet"
    endif
  endif
  if( $step == 3 ) then
    set maskfile = `$pathScript/ReadConfig.script $configFile OUTPUT_MASK_FILE`
    set bias = `$pathScript/ReadConfig.script $configFile biasFieldCorrection`
    set outputdir = "`$pathScript/ReadConfig.script $configFile OUTPUT_DIR`"
    set abc_image = "`$pathScript/ReadConfig.script $configFile ABC_IMAGE`"
    set abcSuffix = "seg"
    if( ! -d $Result_dir/3-BrainMaskComputation ) then
      if( -e $Result_dir/3-BrainMaskComputation ) then
        echo "Error: Result directory name already exists and is not a directory"
        exit -1
      else
        mkdir $Result_dir/3-BrainMaskComputation
      endif
    endif
    if( ! -d $Result_dir/3-BrainMaskComputation/BrainMasks ) then
      if( -e $Result_dir/3-BrainMaskComputation/BrainMasks ) then
        echo "Error: Result directory name already exists and is not a directory"
        exit -1
      else
        mkdir $Result_dir/3-BrainMaskComputation/BrainMasks
      endif
    endif
    if( ${bias} == "TRUE" ) then
      if( ! -d $Result_dir/3-BrainMaskComputation/BiasCorrected ) then
        if( -e $Result_dir/3-BrainMaskComputation/BiasCorrected ) then
          echo "Error: Result directory name already exists and is not a directory"
          exit -1
        else
          mkdir $Result_dir/3-BrainMaskComputation/BiasCorrected
        endif
      endif
    endif
    foreach i ($cases)
      set caseFolder=`echo "$outputdir"| sed "s/\*/$i/g"`
      set maskCase=`echo "$maskfile"| sed "s/\*/$i/g"`
      ln -sf $caseFolder/${maskCase} $Result_dir/Cases/$i/${maskCase}
      ln -sf $caseFolder/${maskCase} $Result_dir/3-BrainMaskComputation/BrainMasks/${maskCase}
      if( $bias == "TRUE" ) then
        echo "Linking bias field corrected image not implemented yet"
      endif
    end
  else if ( $step == 4 ) then
    set atlasDir = `$pathScript/ReadConfig.script $configFile outputDir`
    if( ! -d $directory/$resultspredir/Average ) then
      if( -e $directory/$resultspredir/Average ) then
        echo "Error: Result directory name already exists and is not a directory"
        echo "Links not created for Average"
        break
      else
        mkdir $directory/$resultspredir/Average
      endif
    endif
    if( -d $directory/$resultspredir/Average ) then
      set tolink = `\ls $atlasDir | grep '.nii\|.gipl\|.nhdr\|.nrrd\|.mha\|.mhd'|grep -v '~'`
      foreach j ($tolink)
        ln -sf $atlasDir/$j $directory/$resultspredir/Average/$j
      end
      foreach i ($cases)
        ln -sf $directory/$processpredir/$i/$subDir/${i}_hFieldToPopAverage.mha $directory/$resultspredir/$i/${i}_hFieldToPopAverage.mha
        ln -sf $directory/$processpredir/$i/$subDir/${i}_inv_hFieldToPopAverage.mha $directory/$resultspredir/$i/${i}_inv_hFieldToPopAverage.mha
      end
    endif

  else if ( $step == 5 ) then
    set atlasDir = `$pathScript/ReadConfig.script $configFile outputDir`
    if( ! -d $directory/$resultspredir/Average ) then
      if( -e $directory/$resultspredir/Average ) then
        echo "Error: Result directory name already exists and is not a directory"
        echo "Links not created for Average Segmentation"
        break
      else
        mkdir $directory/$resultspredir/Average
      endif
    endif
    if( -d $directory/$resultspredir/Average ) then
      set popatlasdir = `$pathScript/ReadConfig.script $configFile PopAverageDir`
      set parcellationFile = `$pathScript/ReadConfig.script $configFile TEMPLATE_SEGMENTATION`
      set parcellationFileTag = $parcellationFile:r
      ln -sf $popatlasdir/${parcellationFileTag}.nrrd $directory/$resultspredir/Average/${parcellationFileTag}.nrrd
    endif

  else if ( $step == 6 ) then 
      set dir  = `$pathScript/ReadConfig.script $configFile dir` 
      set output_pre_subdir = `$pathScript/ReadConfig.script $configFile OUTPUT_PRE_SUBDIR`
      set process_subdir = `$pathScript/ReadConfig.script $configFile PROCESS_SUBDIR`
      set labelmapstowarp = `$pathScript/ReadConfig.script $configFile LabelMapsToWarp`
      foreach i ($cases)
        foreach j ($labelmapstowarp)
          set labelmapstag = $j:r
          ln -s $dir/$output_pre_subdir/$i/$process_subdir/${i}_${labelmapstag}.nrrd $directory/$resultspredir/$i/${i}_${labelmapstag}.nrrd 
          echo "ln -s "$dir"/"$output_pre_subdir"/"$i"/"$process_subdir"/"${i}"_"${labelmapstag}".nrrd" $directory"/"$resultspredir"/"$i"/"${i}"_"${labelmapstag}".nrrd"
        end            
      end

  else if ( $step == 7 ) then 
    set labelmapssuffix = `$pathScript/ReadConfig.script $configFile LabelMapsSuffix`
    set stat_file_suffix = `$pathScript/ReadConfig.script $configFile STAT_FILE_SUFFIX`
    set dir = `$pathScript/ReadConfig.script $configFile dir`
    set output_pre_subdir = `$pathScript/ReadConfig.script $configFile OUTPUT_PRE_SUBDIR`
    set process_subdir = `$pathScript/ReadConfig.script $configFile PROCESS_SUBDIR`
    foreach i ($cases)     
      foreach j ($labelmapssuffix)
        set name = $j:r
        foreach k ($stat_file_suffix)
          set k_noext = $k:r
          ln -sf $dir/$output_pre_subdir/$i/$process_subdir/${i}${name}${k_noext}_stat.txt $directory/$resultspredir/$i/${i}${name}${k_noext}.txt
        end
      end
    end
  endif
endif
