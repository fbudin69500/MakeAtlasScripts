### The script uses:
#- rreg
#- transformation
#- areg
#- ResampleVolume2
###############################
# iterate over all cases and do initial registration onto template frame
	Echo ('Registering '${Case})

	# requires three files
	# 1) source file (subject image)
	# 2) destination file (template image)
	# 3) transformation file
	# 4) registration parameter file (if necessary)

If( ${IS_SCALED} == TRUE )
  Set ( TemplateFile ${tempDir}/${Case}/template.gipl.gz )
  Set ( TemplateFile_IMG ${tempDir}/${Case}/template_IM.gipl.gz )
  set ( TemplateFile_TAG template ) 
  set( TemplateFile_RV2 ${tempDir}/${Case}/template_RV2.gipl.gz )
Else( ${IS_SCALED} == TRUE )
  Set ( TemplateFile ${tempDir}/template.gipl.gz )
  Set ( TemplateFile_IMG ${tempDir}/template_IM.gipl.gz )
  set ( TemplateFile_TAG template ) 
  set( TemplateFile_RV2 ${tempDir}/template_RV2.gipl.gz )
EndIf( ${IS_SCALED} == TRUE )

echo ()
echo ('${RIGID_REGISTRATION_IMAGE_TAG} = ' ${RIGID_REGISTRATION_IMAGE_TAG})
echo ()

If( ${i} != 0 )
  Set (SrcFile ${CORRECTED} )
  set( masked_image ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}_masked${i}.gipl.gz)
  set( Cmd ${ImageMath} ${SrcFile} -mask ${dilatedMASK} -outfile ${masked_image} -type float )
  If( ${step} < 6 )
    run( output ${Cmd} )
    echo( ${output} )
  EndIf( ${step} < 6 )
  set ( SrcFile ${masked_image} )
  set ( SrcFile_TAG ${Case}${RIGID_REGISTRATION_IMAGE_TAG}_masked${i})
Else( ${i} != 0 )
  Set (SrcFile ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}.gipl.gz)
  set (SrcFile_TAG ${Case}${RIGID_REGISTRATION_IMAGE_TAG})
EndIf( ${i} != 0 )

#histogram match
Set( DestImg ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}_hm${i}.gipl.gz )
Set( IMCmd ImageMath ${SrcFile} -matchHistogram ${TemplateFile} -outfile ${DestImg} -type float )

echo()
echo('${DestImg1} = ' ${DestImg})
echo()

If( ${step} < 7 )
  Run( output ${IMCmd} )
  Echo( ${output} )
EndIf( ${step} < 7 )

echo()
echo('${DestImg2} = ' ${DestImg})
echo()

Set( SrcFile ${DestImg} )

echo()
echo('${DestImg3} = ' ${DestImg})
echo()

#Set (DofFile ${tempDir}/${Case}/${Case}_rigid${i}.dof)
Set (RegParamFile ${CONFIGDIR}/rreg_rigid.params)

if( ${Rigid} == TRUE )
  #Set (alignCmd ${rreg} ${TemplateFile} ${SrcFile} -parin ${RegParamFile} -dofout ${DofFile})
  #echo (${alignCmd})
  
  set( NII_FILE_PREFIX ${tempDir}/template_to_${SrcFile_TAG}_RV2 )

echo()
echo('This is new 1')
echo()
Set (RegConfigFile ${CONFIGDIR}/rreg_TO_TEMPLATE.param )
Set (AffDofFile ${tempDir}/${Case}/${Case}_affine${i}.dof )
# affine registration

  #####Uses RI for an initialization and saves transform##################### align template and image
set( TRANSFORM ${tempDir}/Init_transform.txt )
set( RegCmd ${RegisterImages} --initialization CentersOfMass ${TemplateFile} ${SrcFile} --saveTransform ${TRANSFORM})

  echo( ${RegCmd} )
  if (${step} < 8)
    run( output ${RegCmd} )
    echo( ${output} )
  endif (${step} < 8)

  #####ITKTransformTools#####################
  set ( Grid ${tempDir}/Grid.nrrd )
  set ( ITKTTCmd ${ITKTransformTools} size ${TemplateFile} ${TRANSFORM} --grid ${Grid} )

  echo( ${ITKTTCmd} )
  if (${step} < 9)
    run( output ${ITKTTCmd} )
    echo( ${output} )
  endif (${step} < 9)

  #####ResampleVolume2#####################
# templare_rv2??
  set ( TemplateFile_RV2 ${tempDir}/${Case}/${TemplateFile_TAG}_RV2.nrrd ) 
  set ( RV2Cmd ${ResampleVolume2} -f ${TRANSFORM} -i nn -R ${Grid} ${TemplateFile} ${TemplateFile_RV2})
 # set ( SrcFile_RV2 ${tempDir}/${Case}/${SrcFile_TAG}_RV2.nrrd ) 
 # set ( RV2Cmd ${ResampleVolume2} -f ${TRANSFORM} -i nn -R ${Grid} ${SrcFile} ${SrcFile_RV2})

  echo( ${RV2Cmd} )
  if (${step} < 10)
    run( output ${RV2Cmd} )
    echo( ${output} )
  endif (${step} < 10)

echo()
echo('This is not new')
echo()


  set ( AntsCmd ${ANTS} 3 -m MI[${SrcFile} , ${TemplateFile_RV2} , 1, 128] -i 0 -o ${NII_FILE_PREFIX} )
 # set ( AntsCmd ${ANTS} 3 -m MI[${SrcFile} , ${TemplateFile_RV2} , 1, 128] -i 0 -o ${NII_FILE_PREFIX} )
  echo (${AntsCmd})
  If( ${step} < 11 )
echo ('blulbu')
    Run (output ${AntsCmd})
    Echo (${output})
    echo()
  EndIf( ${step} < 11 )

  Set( DstImg ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}_rigid${i}.gipl.gz )
  #Set (transformCmd ${transformation} ${SrcFile} ${DstImg} -dofin ${DofFile} -target ${TemplateFile} -bspline )
## francois should validate this:
  Set (RV2Cmd ${ResampleVolume2} -f ${TRANSFORM} -i nn -R ${TemplateFile_RV2} ${SrcFile} ${DstImg} )
  echo ('${RV2Cmd} = ' ${RV2Cmd})
  If( ${step} < 12 )
    Run (output ${RV2Cmd})
    Echo (${output})
  EndIf( ${step} < 12 )
Else( ${Rigid} == TRUE )
  Set( DstImg ${SrcFile} )
Endif( ${Rigid} == TRUE )

echo()
echo('${DstImg} = '${DstImg})
echo()

echo()
echo('This is new')
echo()

Set (RegConfigFile ${CONFIGDIR}/rreg_TO_TEMPLATE.param )
Set (AffDofFile ${tempDir}/${Case}/${Case}_affine${i}.dof )
# affine registration
set( RESCALED_DstImg ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}_rigid${i}_rescaled.gipl.gz )
set( RESCALED_DstImg_TAG ${Case}${RIGID_REGISTRATION_IMAGE_TAG}_rigid${i}_rescaled)
set( IM_Cmd ${ImageMath} ${DstImg} -rescale 0,10000 -type float -outfile ${RESCALED_DstImg} )
echo(${IM_Cmd})
  If( ${step} < 12 )
  run( output ${IM_Cmd} )
  echo( ${output} )
  EndIf( ${step} < 12 )

  set( HMCmd ${ImageMath} ${TemplateFile} -matchHistogram ${RESCALED_DstImg} -outfile ${TemplateFile_IMG} -type float)
echo(${HMCmd})
  If( ${step} < 12 )
  run( output ${HMCmd} )
  echo( ${output} )
  EndIf( ${step} < 12 )

echo()
echo('This is not new')
echo()

    set( aNII_FILE_PREFIX ${RESCALED_DstImg_TAG}_to_${TemplateFile_TAG}_ )
    set( AFFINE_FILE ${RESCALED_DstImg_TAG}_to_${TemplateFile_TAG}_Affine.txt )

set ( AntsCmd2 ${ANTS} 3 -m MI[${RESCALED_DstImg}, ${TemplateFile_IMG}, 1, 128] -i 0 -o ${aNII_FILE_PREFIX})
# Set (regCmd ${areg} ${DstImg} ${TemplateFile} -parin ${RegConfigFile} -dofout ${AffDofFile} )
Echo (${AntsCmd2})
If( ${step} < 13 )
  Run (output ${AntsCmd2})
  Echo (${output})
EndIf( ${step} < 13 )

echo()
echo('${ATLAS_TAG} = '${ATLAS_TAG})

ForEach( Type ${ATLAS_TAG} )
    Set (TargetFile ${tempDir}/${Case}/${Case}${RIGID_REGISTRATION_IMAGE_TAG}.gipl.gz)
    If( ${IS_SCALED} == TRUE )
      Set ( image ${tempDir}/${Case}/${Type}.gipl.gz )
    Else( ${IS_SCALED} == TRUE )
      Set ( image ${tempDir}/${Type}.gipl.gz )
    EndIf( ${IS_SCALED} == TRUE )

    if( ${Rigid} == TRUE )
      Set( DstImg ${tempDir}/${Case}/${Type}_rigid_to_${Case}${RIGID_REGISTRATION_IMAGE_TAG}_rigid${i}.gipl.gz )
      #Set (transformCmd ${transformation} ${image} ${DstImg} -dofin ${AffDofFile} -target ${TargetFile} -bspline )
     # Set (transformCmd ${transformation} ${image} ${DstImg} -dofin ${AFFINE_FILE} -target ${TargetFile} -bspline )
## francois should validate this:
  Set (RV2Cmd ${ResampleVolume2} -f ${AFFINE_FILE} -i nn -R ${TargetFile} ${image} ${DstImg} )
      Echo (${RV2Cmd})
      If( ${step} < 14 )
        Run (output ${RV2Cmd})
        Echo (${output})
      EndIf( ${step} < 14 )
      Set( SrcImg ${DstImg} )
    Else( ${Rigid} == TRUE )
      Set( SrcImg ${image} )
    EndIf( ${Rigid} == TRUE )
    Set( DstImg ${tempDir}/${Case}/${Type}_rigid_to_${Case}${RIGID_REGISTRATION_IMAGE_TAG}${i}.gipl.gz )
    Set (transformCmd ${transformation} ${SrcImg} ${DstImg} -dofin ${DofFile} -invert -target ${TargetFile} -bspline )
  Set (RV2Cmd ${ResampleVolume2} -f ${TRANSFORM} -i nn -R ${TargetFile} ${SrcImg} ${DstImg} )
    Echo (${RV2Cmd})
    If( ${step} < 15 )
      Run (output ${RV2Cmd})
      Echo (${output})
    EndIf( ${step} < 15 )
    Set( SrcImg ${DstImg} )
    Set( DstImg ${ABC_Case_DIR}/${Type}.mha )
    Set (transformCmd ${ImageMath} ${SrcImg} -changeOrig ${TargetFile} -outfile ${DstImg} )
    Echo (${transformCmd})
    If( ${step} < 16 )
      Run (output ${transformCmd})
      Echo (${output})
    EndIf( ${step} < 16 )
EndForEach( Type ATLAS_TAG )
