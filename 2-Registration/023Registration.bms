echo('023Registration')

If( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
  Set( Reg_Ext nrrd )
  If( ${REGTYPE} == 'FA' )
    Set( MOVING_IMAGE ${TEMPDIR}/${ROOTNAME}_DTI_FA.${Reg_Ext} )
    Set( FLAG -f )
  EndIf( ${REGTYPE} == 'FA' )
  If( ${REGTYPE} == 'MD' )
    Set( FLAG -m )
    Set( MOVING_IMAGE ${TEMPDIR}/${ROOTNAME}_DTI_MD.${Reg_Ext} )
  EndIf( ${REGTYPE} == 'MD' )
  echo ('Computation image to be registered')
  Set ( Cmd ${dtiprocessPATH} --dti_image ${DTI_DIR}/${DTImage} ${FLAG} ${MOVING_IMAGE} --scalar-float )
  Run ( output ${Cmd} )
  echo( ${output} )
Else( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )
  Set( MOVING_IMAGE ${INPUTDIR}/${B0} )
  SeT( Reg_Ext B0_EXT )
EndIf( ${INPUTTYPE} == 'DWI' || ${INPUTTYPE} == 'DTI' )


echo("init trans: "${InitialTransform})
if(${InitialTransform} != '' )
echo("plop")
  RegEx( TRANSFORMEDIMAGE ${MOVING_IMAGE} '\.'\${Reg_Ext} REPLACE '' )
  GetFilename( TRANSFORMEDIMAGE ${TRANSFORMEDIMAGE} NAME )
#  GetFilename( TRANSFORMEDIMAGE ${MOVING_IMAGE} NAME_WITHOUT_EXTENSION )
  Set( TRANSFORMEDIMAGE ${TEMPDIR}/${TRANSFORMEDIMAGE}_init_transformed.nrrd )
  Set( Cmd ${ResampleVolume2PATH} ${MOVING_IMAGE} ${TRANSFORMEDIMAGE} -f ${InitialTransform} -R ${Grid} )
  Run( output ${Cmd} )
  echo( ${output} )
  Set( MOVING_IMAGE ${TRANSFORMEDIMAGE} )
  set( TRANSFORMFILE ${TEMPDIR}/${TRANSFORMATIONFILE} )
endif(${InitialTransform} != '' )

If( ${SCALE} == TRUE )
  echo( "1- "${MOVING_IMAGE} )
  echo( "1.1- "${Reg_Ext} )
  RegEx( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE} '\.'\${Reg_Ext} REPLACE '' )
  echo( "2- "${MOVING_IMAGE_ISO_SCALED} )
  GetFilename( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE_ISO_SCALED} NAME )
#  GetFilename( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE} NAME_WITHOUT_EXTENSION )
  if(${InitialTransform} == '' )
    Set( MOVING_IMAGE_ISO_SCALED ${TEMPDIR}/${MOVING_IMAGE_ISO_SCALED}_moving_iso_scale.nrrd )
    Set( ResampleCmd ${ResampleVolume2PATH} ${MOVING_IMAGE} ${MOVING_IMAGE_ISO_SCALED} -R ${Grid} )
    Run( output ${ResampleCmd} )
    echo( ${output} )
  else( ${InitialTransform} == '' )
    Set( MOVING_IMAGE_ISO_SCALED ${MOVING_IMAGE} )
  endif(${InitialTransform} == '' )
  Set( ImageMathCmd ${ImageMathPATH} ${MOVING_IMAGE_ISO_SCALED} -changeSp 1,1,1 -outfile ${MOVING_IMAGE_ISO_SCALED} -type float)
  Run( output ${ImageMathCmd} )
  echo( ${output} )
  Set( FIXED ${ATLAS_ISO_SCALED} )
  Set( MOVING_IMAGE ${MOVING_IMAGE_ISO_SCALED} )
  echo( ${MOVING_IMAGE} )
Else( ${SCALE} == TRUE )
  Set( FIXED ${TEMPLATEDIR}/${TEMPLATE} )
#  Set( MOVING_IMAGE ${MOVING_IMAGE} )
EndIf( ${SCALE} == TRUE )

if( ${SKULLSTRIP} == TRUE )
  include( 024MaskImage.bms )
  ##Apply mask
  RegEx( MASKED_MOVING ${MOVING_IMAGE} '\.'\${Reg_Ext} REPLACE '' )
  GetFilename( MASKED_MOVING ${MASKED_MOVING} NAME )
#  GetFilename( MASKED_MOVING ${MOVING_IMAGE} NAME_WITHOUT_EXTENSION )
  Set( MASKED_MOVING ${TEMPDIR}/${MASKED_MOVING}_skullstripped.nrrd )
  Set( Cmd ${ImageMathPATH} ${MOVING_IMAGE} -mask ${TEMPDIR}/${ROOTNAME}_Mask.nrrd -outfile ${MASKED_MOVING} -type float )
  Run( output ${Cmd} )
  echo( ${output} )
  Set( MOVING_IMAGE ${MASKED_MOVING} )
endif( ${SKULLSTRIP} == TRUE )

#echo('Histogram Matching')
#GetFilename( MOVING_IMAGE_hm ${MOVING_IMAGE} NAME_WITHOUT_EXTENSION )
#Set( MOVING_IMAGE_hm ${TEMPDIR}/${MOVING_IMAGE_hm}_hm.nrrd )
#Set( HMCmd ${HistogramMatchingPATH} ${MOVING_IMAGE} ${TEMPLATEDIR}/${TEMPLATE} ${MOVING_IMAGE_hm} --#numberOfHistogramLevels 1024 --numberOfMatchPoints 50 --threshold )
#Run( output ${HMCmd} )
#echo( ${output} )



echo('Registration')
Set( RegCmd ${BRAINSFitPATH --movingVolume ${MOVING_IMAGE} --fixedVolume ${FIXED} --outputVolume ${TEMPDIR}/${ROOTNAME}_RegisterImagesOutput.nrrd --linearTransform ${TEMPDIR}/affine_transform.txt --transformType Affine --costMetric MMI --initializeTransformMode useGeometryAlign --minimumStepLength .00001 --translationScale 10 --strippedOutputTransform ${TRANSFORMFILE} )

Run( output ${RegCmd} )
echo( ${output} )
