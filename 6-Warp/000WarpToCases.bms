###Tools used###
#ImageMath
#WarpImageMultiTransform
#ResampleVolume2
#RegisterImages
#ANTS
#ITKTransformTools


GetListSize( sizeTEMPLATE ${Template_Image} )
GetListSize( sizeInput ${WARP_INPUT_FILE} )
GetListSize( sizeTEMPLATEMASK ${TEMPLATE_MASK} )
GetListSize( sizeInputMask ${INPUT_MASK_FILE} )
GetListSize( sizeMeasure ${Measure} )
GetListSize( sizebin ${bin_number} )
if( ${sizeTEMPLATE} != ${sizeInput} || ${sizeMeasure} != ${sizeTEMPLATE} || ${sizebin} != ${sizeTEMPLATE} )
  echo( 'TEMPLATE, WARP_INPUT_FILE, Measure and bin_number must have the same number of elements' )
  exit()
endif()

If( ${sizeTEMPLATEMASK} == 0 && ${INPUT_MASK_FILE} == 1 )
  echo('We will use the population average mask with the -x flag for ANTS')
  set( ANTSMASK_ONLY TRUE )
else()
  If( ${TEMPLATE_MASK} != '' ) 
    If( ${sizeTEMPLATEMASK} != ${sizeTEMPLATE} )
      echo( 'TEMPLATE and TEMPLATE_MASK must have the same number of elements' )
      exit()
    EndIf()
  EndIf()
  If( ${INPUT_MASK_FILE} != '' ) 
    If( ${sizeInputMask} != ${sizeInput} )
      echo( 'WARP_INPUT_FILE and INPUT_MASK_FILE must have the same number of elements' )
      exit()
    EndIf()
  EndIf()
EndIf()

GetListSize( sizeTEMPLATE_LABELS ${TEMPLATE_LABELS} )
GetListSize( sizeINPUT_LABELS ${INPUT_LABELS} )
if( ${sizeTEMPLATE_LABELS} != ${sizeINPUT_LABELS} )
  echo( 'TEMPLATE_LABELS and INPUT_LABELS must have the same number of elements' )
  exit()
endif()

set( template_mask_filtered '' )
MakeDirectory( ${tempDir} )
set( Mask_reg '' )
if( ${USE_INV_HFIELD} == FALSE && ${TEMPLATE_MASK} != '' )
  #######Mask template just in case it wasn't
  Set( count 0 )
  Foreach( mask_current_template ${TEMPLATE_MASK} )
    GetParam( template_current ${Template_Image} ${count} )
    GetFileName( template_TAG ${template_current} NAME_WITHOUT_EXTENSION )
    Set( MaskedTemplate ${tempDir}/${template_TAG}_Masked.nii.gz )
    Set( Cmd ImageMath ${template_current} -mask ${mask_current_template} -outfile ${MaskedTemplate} -type float )
    echo( ${Cmd} )
    run( output ${Cmd} )
    echo( ${output} )
    if( ${count} > 0 )
      set( MaskedTemplate_List ${MaskedTemplate_List} ${MaskedTemplate} )
    else()
      set( MaskedTemplate_List ${MaskedTemplate} )
    endif()
    Inc( count 1)
    Int( count )
  EndForEach()
  set( Template_Image ${MaskedTemplate_List} )
endif( ${USE_INV_HFIELD} == FALSE && ${TEMPLATE_MASK} != '' )

ForEach( i ${CASES} )
  ######################Mask case image###########################
  RegEx(OutSubjDir ${OUTPUT_DIR} '\*' REPLACE ${i} )
  MakeDirectory( ${OutSubjDir} )
  if( ${ScriptName} != '' )
    GetFilename( name ${ScriptName} NAME )
    CopyFile( ${ScriptName} ${OutSubjDir}/${name} )
  Endif( ${ScriptName} != '' )

  if( ${USE_INV_HFIELD} == TRUE )
    RegEx( InvHFieldCase ${InvHField} '\*' REPLACE ${i} )
    GetParam( First_image ${WARP_INPUT_FILE} 0)
    RegEx( image ${First_image} '\*' REPLACE ${i} )
    #####Resample images############
    ForEach(j ${LabelMapsToWarp} )
      GetFilename( name ${j} NAME )
      set( ResampledImage ${OutSubjDir}/${i}_${name} )
      set( Cmd ${ResampleVolume2} ${j} ${ResampledImage} -i nn -R ${image} -H ${InvHFieldCase} --hfieldtype ${hfieldTypeVar})
      echo( ${Cmd} )
      run( output ${Cmd} )
      echo( ${output} )
    EndForEach(j ${LabelMapsToWarp} )
  else( ${USE_INV_HFIELD} == TRUE )
    #######Mask input images
    if( ${INPUT_MASK_FILE} != '' )
      Set( count 0 )
      Foreach( mask_current ${INPUT_MASK_FILE} )
        GetParam( input_current ${WARP_INPUT_FILE} ${count} )
        RegEx( image ${input_current} '\*' REPLACE ${i} )
        RegEx( mask ${mask_current} '\*' REPLACE ${i} )
        GetFileName( image_TAG ${image} NAME_WITHOUT_EXTENSION )
        Set( MaskedImage ${tempDir}/${image_TAG}_Masked.nii.gz )
        Set( Cmd ImageMath ${image} -mask ${mask} -outfile ${MaskedImage} -type float )
        echo( ${Cmd} )
        run( output ${Cmd} )
        echo( ${output} )
        if( ${count} > 0 )
          set( MaskedImage_List ${MaskedImage_List} ${MaskedImage} )
        else()
          set( MaskedImage_List ${MaskedImage} )
        endif()
        Inc( count 1)
        Int( count )
      EndForEach()
      set( images ${MaskedImage_List} )
    Else()
      Set( count 0 )
      ForEach( input_current ${WARP_INPUT_FILE} )
        RegEx( image ${input_current} '\*' REPLACE ${i} )
        if( ${count} > 0 )
          set( images_List ${images_List} ${image} )
        else()
          set( images_List ${image} )
        endif()
        Inc( count 1)
        Int( count )
      EndForEach()
      set( images ${images_List} )
    EndIf()
    ########Get First images
    GetParam( First_image ${images} 0)
    GetParam( First_template ${Template_Image} 0 )
    ########Initial registration
    set( InitialTransform ${tempDir}/${i}_initialTransform.txt )
    Set( Cmd ${RegisterImages} --initialization CentersOfMass --saveTransform ${InitialTransform} --registration Initial ${First_image} ${First_template} )
    echo( ${Cmd} )
    run( output ${Cmd} )
    echo( ${output} )

    set( InitialTransformGrid ${tempDir}/${i}_template_initialTransformGrid.nii.gz )
    set( Cmd ${ITKTransformTools} size ${First_template} ${InitialTransform} --grid ${InitialTransformGrid} )
    echo( ${Cmd} )
    run( output ${Cmd} )
    echo( ${output} )

    set( count 0 )
    ForEach( currentTemplate ${Template_Image} )
      GetFileName( template_TAG ${currentTemplate} NAME_WITHOUT_EXTENSION )
      set( InitialTemplate ${tempDir}/${i}_${template_TAG}_initial.nii.gz )
      set( Cmd ${ResampleVolume2} -R ${InitialTransformGrid} -f ${InitialTransform} ${currentTemplate} ${InitialTemplate} -i nn )
      echo( ${Cmd} )
      run( output ${Cmd} )
      echo( ${output} )
      if( ${count} > 0 )
        set( initializedTemplates ${initializedTemplates} ${InitialTemplate} )
      else()
        set( initializedTemplates ${InitialTemplate} )
      endif()
      Inc( count 1)
      Int( count )
    EndForEach()

    ForEach(j ${LabelMapsToWarp} )
      GetFilename( name ${j} NAME )
      set( ResampledImage ${tempDir}/${i}_initialTransform_${name} )
      set( Cmd ${ResampleVolume2} ${j} ${ResampledImage} -i nn -R ${InitialTransformGrid} -f ${InitialTransform} )
      echo( ${Cmd} )
      run( output ${Cmd} )
      echo( ${output} )
    EndForEach(j ${LabelMapsToWarp} )
    
    if( ${INPUT_MASK_FILE} != '' )
      if( ${FIRST_MASK_IS_FULL_BRAIN} == TRUE )
        GetParam( fixed_full_brain ${INPUT_MASK_FILE} 0 )
        RegEx( fixed_full_brain_case ${fixed_full_brain} '\*' REPLACE ${i} )
        if( ${ANTSMASK_ONLY} == FALSE )
          GetFileName( fixed_full_brain_filename ${fixed_full_brain_case} NAME_WITHOUT_EXTENSION )
          set( fixed_full_brain_dilated ${tempDir}/${fixed_full_brain_filename}_dilated.nii.gz  )
          Set( Cmd ${ImageMath} ${fixed_full_brain} -dilate 3,1 -outfile ${fixed_full_brain_dilated} -type float )
          Run( output ${ImageMath} )
          echo( ${output} )
          set( fixed_full_brain_case ${fixed_full_brain_dilated} )
        endif()
        Set( ants_use_mask -x ${fixed_full_brain_case} )
      endif()
    endif() 
    #####################################################
    #######################ANTS##########################
    #####################################################
    set( Labels_reg '')
    if( ${TEMPLATE_LABELS} != '' )
      Set( count 0 )
      ForEach( label ${TEMPLATE_LABELS} )
        GetFileName( label_TAG ${label} NAME_WITHOUT_EXTENSION )
        set( InitialLabel ${tempDir}/${i}_${label_TAG}_initialMask.nii.gz )
        set( Cmd ${ResampleVolume2} -R ${InitialTransformGrid} -f ${InitialTransform} ${label} ${InitialLabel} -i nn )
        echo( ${Cmd} )
        run( output ${Cmd} )
        echo( ${output} )
        GetParam( inputLabel ${INPUT_LABELS} ${count} )
        RegEx( currentLabel ${inputLabel} '\*' REPLACE ${i} )
        set( Labels_reg ${Labels_reg} -m MSQ[${currentLabel},${InitialLabel},1,0] )
        Inc( count 1)
        Int( count )
      EndForEach()
    endif( ${TEMPLATE_LABELS} != '' )

    set( count 0 )
    ForEach( image ${images} )
      GetParam( template ${initializedTemplates} ${count} )
      GetParam( currentMeasure ${Measure} ${count} )
      GetParam( currentBin ${bin_number} ${count} )
      set( reg ${reg} -m ${currentMeasure}[${image},${template},1,0] )
      Inc( count 1)
      Int( count )
    EndForEach()

    GetFilename( template_TAG ${First_template} NAME_WITHOUT_EXTENSION )
    set( NII_FILE_PREFIX ${tempDir}/${template_TAG}_to_${i} )
    set( AFFINE_FILE ${NII_FILE_PREFIX}Affine.txt )
    set( WARP_FILE ${NII_FILE_PREFIX}Warp.nii.gz )
    set ( AntsCmd ${ANTS} 3 ${Labels_reg} ${reg} ${ants_use_mask} -i ${IterationNumber} -r Gauss[1,0] -t SyN[0.25] -o ${NII_FILE_PREFIX} )
    echo( ${AntsCmd} )
    run( output ${AntsCmd} )
    echo( ${output} )

    #####Warp#####################
    ForEach( template ${initializedTemplates} )
      GetFileName( template_TAG ${template} NAME_WITHOUT_EXTENSION )
      Set( template_WARP ${tempDir}/${template_TAG}_ANTSWarp.nii.gz  )
      set( WarpCmd ${WarpImageMultiTransform} 3 ${template} ${template_WARP} ${WARP_FILE} ${AFFINE_FILE} -R ${First_image} )
      echo( ${WarpCmd} )
      Run( output ${WarpCmd} )
      echo( ${output} )
    EndForEach()
######Merge transforms############Could only work for DTIs!!!!!!!!!!!!!!
########${InSubjDir}/${i}_dti_f_toTemplate.nhdr has to be replaced by something

    set( Concatenated ${OutSubjDir}/${i}_DisplacementField.nrrd )
    set( Cmd ITKTransformTools concatenate ${Concatenated} -r ${First_image} ${InitialTransform} ${AFFINE_FILE} ${WARP_FILE} displacement )
    echo( ${Cmd} )
    run( output ${Cmd} )
    echo( ${output} )

    set( AFFINE_FILE_inv ${tempDir}/${template_TAG}_to_${i}Affine_inv.txt )
    set( Cmd ITKTransformTools invert ${AFFINE_FILE} ${AFFINE_FILE_inv} )
    echo( ${Cmd} )
    run( output ${Cmd} )
    echo( ${output} )

    set( InitialTransform_inv ${tempDir}/${i}_initialTransform_inv.txt )
    set( Cmd ITKTransformTools invert ${InitialTransform} ${InitialTransform_inv} )
    echo( ${Cmd} )
    run( output ${Cmd} )
    echo( ${output} )

    set( InverseConcatenated ${OutSubjDir}/${i}_InverseDisplacementField.nrrd )
    set( Cmd ITKTransformTools concatenate ${InverseConcatenated} -r ${First_template} ${WARP_FILE} displacement ${AFFINE_FILE_inv} ${InitialTransform_inv} )
    echo( ${Cmd} )
    run( output ${Cmd} )
    echo( ${output} )

###############################

    ForEach(j ${LabelMapsToWarp} )
      GetFilename( name ${j} NAME )
      set( initialImage ${tempDir}/${i}_initialTransform_${name} )
      set( ResampledImage ${OutSubjDir}/${i}_${name} )
      set( Cmd ${WarpImageMultiTransform} 3 ${initialImage} ${ResampledImage} ${WARP_FILE} ${AFFINE_FILE} -R ${First_image} --use-NN)
      echo( ${Cmd} )
      run( output ${Cmd} )
      echo( ${output} )
    EndForEach(j ${LabelMapsToWarp} )
  endif( ${USE_INV_HFIELD} == TRUE )
EndForEach( i ${CASES} )

